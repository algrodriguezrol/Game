
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin
  0 .text         00000ea4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000d0  00000ea4  00000ea4  00000ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000f74  00000f74  00000fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000f88  00000f88  00000fdc  2**2
                  ALLOC
  4 .debug_abbrev 00000452  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e99  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c55  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000360  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004d2  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000003c2  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000081  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000443  00000000  00000000  00003bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000078  00000000  00000000  00004025  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci칩n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 d2 	calli 814 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0f 90 	ori gp,gp,0xf90
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0f 88 	ori r1,r1,0xf88
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 10 0c 	ori r3,r3,0x100c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 01 6e 	calli 6f4 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeCharlcd>:
//---------------------------------------------------------------------------
// LCD Functions
//--------------
//-------------------------------------------------------------
void writeCharlcd (char letter) 
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	20 2c 00 ff 	andi r12,r1,0xff
	//y su direcci칩n corresponde a columnas dadas por lo primeros cuatro bits y a las filas, los otros 4 bits.
	//lo que se hace es pasar una mascara para cada caso, y luego
	//enviar cada posici칩n como un comando.	
	char highnib;
	char lownib;
	highnib = letter&0xF0;
 220:	21 8d 00 f0 	andi r13,r12,0xf0
	lownib = letter&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);
 224:	39 ab 00 09 	ori r11,r13,0x9
 228:	b9 60 10 00 	mv r2,r11
 22c:	34 01 00 27 	mvi r1,39
 230:	f8 00 02 ea 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001101);
 234:	39 a2 00 0d 	ori r2,r13,0xd
 238:	34 01 00 27 	mvi r1,39
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);  

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001001);
 23c:	21 8c 00 0f 	andi r12,r12,0xf
	char lownib;
	highnib = letter&0xF0;
	lownib = letter&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001101);
 240:	f8 00 02 e6 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);  

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001001);
 244:	3d 8c 00 04 	sli r12,r12,4
	highnib = letter&0xF0;
	lownib = letter&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001101);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001001);  
 248:	b9 60 10 00 	mv r2,r11
 24c:	34 01 00 27 	mvi r1,39
 250:	f8 00 02 e2 	calli dd8 <i2c_write_lcd>

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001001);
 254:	39 8b 00 09 	ori r11,r12,0x9
 258:	b9 60 10 00 	mv r2,r11
 25c:	34 01 00 27 	mvi r1,39
 260:	f8 00 02 de 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001101);
 264:	39 82 00 0d 	ori r2,r12,0xd
 268:	34 01 00 27 	mvi r1,39
 26c:	f8 00 02 db 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001001);
 270:	b9 60 10 00 	mv r2,r11
 274:	34 01 00 27 	mvi r1,39
 278:	f8 00 02 d8 	calli dd8 <i2c_write_lcd>

	msleep(2);
 27c:	34 01 00 02 	mvi r1,2
 280:	f8 00 01 56 	calli 7d8 <msleep>
}
 284:	2b 9d 00 04 	lw ra,(sp+4)
 288:	2b 8b 00 10 	lw r11,(sp+16)
 28c:	2b 8c 00 0c 	lw r12,(sp+12)
 290:	2b 8d 00 08 	lw r13,(sp+8)
 294:	37 9c 00 10 	addi sp,sp,16
 298:	c3 a0 00 00 	ret

0000029c <writeCommandlcd>:

void writeCommandlcd (char command) 
{
 29c:	37 9c ff f0 	addi sp,sp,-16
 2a0:	5b 8b 00 10 	sw (sp+16),r11
 2a4:	5b 8c 00 0c 	sw (sp+12),r12
 2a8:	5b 8d 00 08 	sw (sp+8),r13
 2ac:	5b 9d 00 04 	sw (sp+4),ra
 2b0:	20 2c 00 ff 	andi r12,r1,0xff
	char highnib;
	char lownib;
	highnib = command&0xF0;
 2b4:	21 8d 00 f0 	andi r13,r12,0xf0
	lownib = command&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);
 2b8:	39 ab 00 08 	ori r11,r13,0x8
 2bc:	b9 60 10 00 	mv r2,r11
 2c0:	34 01 00 27 	mvi r1,39
 2c4:	f8 00 02 c5 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001100);
 2c8:	39 a2 00 0c 	ori r2,r13,0xc
 2cc:	34 01 00 27 	mvi r1,39
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);  

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001000);
 2d0:	21 8c 00 0f 	andi r12,r12,0xf
	char lownib;
	highnib = command&0xF0;
	lownib = command&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001100);
 2d4:	f8 00 02 c1 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);  

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001000);
 2d8:	3d 8c 00 04 	sli r12,r12,4
	highnib = command&0xF0;
	lownib = command&0x0F;

	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001100);
	i2c_write_lcd(ADDRESS_I2C_LCD,highnib|0b00001000);  
 2dc:	b9 60 10 00 	mv r2,r11
 2e0:	34 01 00 27 	mvi r1,39
 2e4:	f8 00 02 bd 	calli dd8 <i2c_write_lcd>

	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001000);
 2e8:	39 8b 00 08 	ori r11,r12,0x8
 2ec:	b9 60 10 00 	mv r2,r11
 2f0:	34 01 00 27 	mvi r1,39
 2f4:	f8 00 02 b9 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001100);
 2f8:	39 82 00 0c 	ori r2,r12,0xc
 2fc:	34 01 00 27 	mvi r1,39
 300:	f8 00 02 b6 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,(lownib<<4)|0b00001000);
 304:	b9 60 10 00 	mv r2,r11
 308:	34 01 00 27 	mvi r1,39
 30c:	f8 00 02 b3 	calli dd8 <i2c_write_lcd>

	msleep(2);
 310:	34 01 00 02 	mvi r1,2
 314:	f8 00 01 31 	calli 7d8 <msleep>
}
 318:	2b 9d 00 04 	lw ra,(sp+4)
 31c:	2b 8b 00 10 	lw r11,(sp+16)
 320:	2b 8c 00 0c 	lw r12,(sp+12)
 324:	2b 8d 00 08 	lw r13,(sp+8)
 328:	37 9c 00 10 	addi sp,sp,16
 32c:	c3 a0 00 00 	ret

00000330 <writeStringlcd>:

void writeStringlcd (char *str) {
 330:	37 9c ff f8 	addi sp,sp,-8
 334:	5b 8b 00 08 	sw (sp+8),r11
 338:	5b 9d 00 04 	sw (sp+4),ra
 33c:	b8 20 58 00 	mv r11,r1
	char *c = str;
	while(*c) {
 340:	40 21 00 00 	lbu r1,(r1+0)
 344:	44 20 00 05 	be r1,r0,358 <writeStringlcd+0x28>
		writeCharlcd(*c);
		c++;
 348:	35 6b 00 01 	addi r11,r11,1
}

void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
		writeCharlcd(*c);
 34c:	fb ff ff af 	calli 208 <writeCharlcd>
	msleep(2);
}

void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
 350:	41 61 00 00 	lbu r1,(r11+0)
 354:	5c 20 ff fd 	bne r1,r0,348 <writeStringlcd+0x18>
		writeCharlcd(*c);
		c++;
	}
}
 358:	2b 9d 00 04 	lw ra,(sp+4)
 35c:	2b 8b 00 08 	lw r11,(sp+8)
 360:	37 9c 00 08 	addi sp,sp,8
 364:	c3 a0 00 00 	ret

00000368 <lcdInit>:

void lcdInit () 
{  
 368:	37 9c ff f8 	addi sp,sp,-8
 36c:	5b 8b 00 08 	sw (sp+8),r11
 370:	5b 9d 00 04 	sw (sp+4),ra
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 374:	34 02 00 38 	mvi r2,56
 378:	34 01 00 27 	mvi r1,39
 37c:	f8 00 02 97 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111100);
 380:	34 02 00 3c 	mvi r2,60
 384:	34 01 00 27 	mvi r1,39
 388:	f8 00 02 94 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
	nsleep(4500000);
 38c:	78 01 00 00 	mvhi r1,0x0
 390:	38 21 0e a4 	ori r1,r1,0xea4
 394:	28 2b 00 00 	lw r11,(r1+0)

void lcdInit () 
{  
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111100);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 398:	34 02 00 38 	mvi r2,56
 39c:	34 01 00 27 	mvi r1,39
 3a0:	f8 00 02 8e 	calli dd8 <i2c_write_lcd>
	nsleep(4500000);
 3a4:	b9 60 08 00 	mv r1,r11
 3a8:	f8 00 01 31 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 3ac:	34 02 00 38 	mvi r2,56
 3b0:	34 01 00 27 	mvi r1,39
 3b4:	f8 00 02 89 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111100);
 3b8:	34 02 00 3c 	mvi r2,60
 3bc:	34 01 00 27 	mvi r1,39
 3c0:	f8 00 02 86 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 3c4:	34 02 00 38 	mvi r2,56
 3c8:	34 01 00 27 	mvi r1,39
 3cc:	f8 00 02 83 	calli dd8 <i2c_write_lcd>
	nsleep(4500000);
 3d0:	b9 60 08 00 	mv r1,r11
 3d4:	f8 00 01 26 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 3d8:	34 02 00 38 	mvi r2,56
 3dc:	34 01 00 27 	mvi r1,39
 3e0:	f8 00 02 7e 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111100);
 3e4:	34 02 00 3c 	mvi r2,60
 3e8:	34 01 00 27 	mvi r1,39
 3ec:	f8 00 02 7b 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
 3f0:	34 02 00 38 	mvi r2,56
 3f4:	34 01 00 27 	mvi r1,39
 3f8:	f8 00 02 78 	calli dd8 <i2c_write_lcd>
	nsleep(200000);
 3fc:	78 02 00 00 	mvhi r2,0x0
 400:	38 42 0e a8 	ori r2,r2,0xea8
 404:	28 41 00 00 	lw r1,(r2+0)
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101100);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
	nsleep(50000);
 408:	38 0b c3 50 	mvu r11,0xc350
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
	nsleep(4500000);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111100);
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00111000);
	nsleep(200000);
 40c:	f8 00 01 18 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
 410:	34 02 00 28 	mvi r2,40
 414:	34 01 00 27 	mvi r1,39
 418:	f8 00 02 70 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101100);
 41c:	34 02 00 2c 	mvi r2,44
 420:	34 01 00 27 	mvi r1,39
 424:	f8 00 02 6d 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
 428:	34 02 00 28 	mvi r2,40
 42c:	34 01 00 27 	mvi r1,39
 430:	f8 00 02 6a 	calli dd8 <i2c_write_lcd>
	nsleep(50000);
 434:	b9 60 08 00 	mv r1,r11
 438:	f8 00 01 0d 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
 43c:	34 02 00 28 	mvi r2,40
 440:	34 01 00 27 	mvi r1,39
 444:	f8 00 02 65 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101100);
 448:	34 02 00 2c 	mvi r2,44
 44c:	34 01 00 27 	mvi r1,39
 450:	f8 00 02 62 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00101000);
 454:	34 02 00 28 	mvi r2,40
 458:	34 01 00 27 	mvi r1,39
 45c:	f8 00 02 5f 	calli dd8 <i2c_write_lcd>
	nsleep(50000);
 460:	b9 60 08 00 	mv r1,r11
 464:	f8 00 01 02 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b10001000);
 468:	34 02 00 88 	mvi r2,136
 46c:	34 01 00 27 	mvi r1,39
 470:	f8 00 02 5a 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b10001100);
 474:	34 02 00 8c 	mvi r2,140
 478:	34 01 00 27 	mvi r1,39
 47c:	f8 00 02 57 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b10001000);
 480:	34 02 00 88 	mvi r2,136
 484:	34 01 00 27 	mvi r1,39
 488:	f8 00 02 54 	calli dd8 <i2c_write_lcd>
	nsleep(50000);
 48c:	b9 60 08 00 	mv r1,r11
 490:	f8 00 00 f7 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00001000);
 494:	34 02 00 08 	mvi r2,8
 498:	34 01 00 27 	mvi r1,39
 49c:	f8 00 02 4f 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00001100);
 4a0:	34 02 00 0c 	mvi r2,12
 4a4:	34 01 00 27 	mvi r1,39
 4a8:	f8 00 02 4c 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b00001000);
 4ac:	34 02 00 08 	mvi r2,8
 4b0:	34 01 00 27 	mvi r1,39
 4b4:	f8 00 02 49 	calli dd8 <i2c_write_lcd>
	nsleep(50000);
 4b8:	b9 60 08 00 	mv r1,r11
 4bc:	f8 00 00 ec 	calli 86c <nsleep>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b11001000);
 4c0:	34 02 00 c8 	mvi r2,200
 4c4:	34 01 00 27 	mvi r1,39
 4c8:	f8 00 02 44 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b11001100);
 4cc:	34 02 00 cc 	mvi r2,204
 4d0:	34 01 00 27 	mvi r1,39
 4d4:	f8 00 02 41 	calli dd8 <i2c_write_lcd>
	i2c_write_lcd(ADDRESS_I2C_LCD,0b11001000);
 4d8:	34 02 00 c8 	mvi r2,200
 4dc:	34 01 00 27 	mvi r1,39
 4e0:	f8 00 02 3e 	calli dd8 <i2c_write_lcd>
	msleep(2);
 4e4:	34 01 00 02 	mvi r1,2
 4e8:	f8 00 00 bc 	calli 7d8 <msleep>
}
 4ec:	2b 9d 00 04 	lw ra,(sp+4)
 4f0:	2b 8b 00 08 	lw r11,(sp+8)
 4f4:	37 9c 00 08 	addi sp,sp,8
 4f8:	c3 a0 00 00 	ret

000004fc <clearDisplay>:
//---------------------------------------------------------------------------
// LCD Commands
//---------------------------------------------------------------------------

void clearDisplay() 
{	writeCommandlcd(0b00000001);
 4fc:	37 9c ff fc 	addi sp,sp,-4
 500:	5b 9d 00 04 	sw (sp+4),ra
 504:	34 01 00 01 	mvi r1,1
 508:	fb ff ff 65 	calli 29c <writeCommandlcd>
}
 50c:	2b 9d 00 04 	lw ra,(sp+4)
 510:	37 9c 00 04 	addi sp,sp,4
 514:	c3 a0 00 00 	ret

00000518 <returnHome>:

void returnHome()
{	writeCommandlcd(0b00000010);
 518:	37 9c ff fc 	addi sp,sp,-4
 51c:	5b 9d 00 04 	sw (sp+4),ra
 520:	34 01 00 02 	mvi r1,2
 524:	fb ff ff 5e 	calli 29c <writeCommandlcd>
}
 528:	2b 9d 00 04 	lw ra,(sp+4)
 52c:	37 9c 00 04 	addi sp,sp,4
 530:	c3 a0 00 00 	ret

00000534 <entryModeSet2>:

void entryModeSet2()
{  	writeCommandlcd(0b00000110);
 534:	37 9c ff fc 	addi sp,sp,-4
 538:	5b 9d 00 04 	sw (sp+4),ra
 53c:	34 01 00 06 	mvi r1,6
 540:	fb ff ff 57 	calli 29c <writeCommandlcd>
}
 544:	2b 9d 00 04 	lw ra,(sp+4)
 548:	37 9c 00 04 	addi sp,sp,4
 54c:	c3 a0 00 00 	ret

00000550 <entryModeSet>:

void entryModeSet()
{	writeCommandlcd(0b00000111);
 550:	37 9c ff fc 	addi sp,sp,-4
 554:	5b 9d 00 04 	sw (sp+4),ra
 558:	34 01 00 07 	mvi r1,7
 55c:	fb ff ff 50 	calli 29c <writeCommandlcd>
}
 560:	2b 9d 00 04 	lw ra,(sp+4)
 564:	37 9c 00 04 	addi sp,sp,4
 568:	c3 a0 00 00 	ret

0000056c <entryModeSet3>:

void entryModeSet3()
{	writeCommandlcd(0b00000100);
 56c:	37 9c ff fc 	addi sp,sp,-4
 570:	5b 9d 00 04 	sw (sp+4),ra
 574:	34 01 00 04 	mvi r1,4
 578:	fb ff ff 49 	calli 29c <writeCommandlcd>
}
 57c:	2b 9d 00 04 	lw ra,(sp+4)
 580:	37 9c 00 04 	addi sp,sp,4
 584:	c3 a0 00 00 	ret

00000588 <entryModeSet4>:

void entryModeSet4()
{	writeCommandlcd(0b00000101);
 588:	37 9c ff fc 	addi sp,sp,-4
 58c:	5b 9d 00 04 	sw (sp+4),ra
 590:	34 01 00 05 	mvi r1,5
 594:	fb ff ff 42 	calli 29c <writeCommandlcd>
}
 598:	2b 9d 00 04 	lw ra,(sp+4)
 59c:	37 9c 00 04 	addi sp,sp,4
 5a0:	c3 a0 00 00 	ret

000005a4 <displayOff>:

void displayOff()
{	writeCommandlcd(0b00001000);
 5a4:	37 9c ff fc 	addi sp,sp,-4
 5a8:	5b 9d 00 04 	sw (sp+4),ra
 5ac:	34 01 00 08 	mvi r1,8
 5b0:	fb ff ff 3b 	calli 29c <writeCommandlcd>
}
 5b4:	2b 9d 00 04 	lw ra,(sp+4)
 5b8:	37 9c 00 04 	addi sp,sp,4
 5bc:	c3 a0 00 00 	ret

000005c0 <displayOn>:

void displayOn()
{	writeCommandlcd(0b00001111);
 5c0:	37 9c ff fc 	addi sp,sp,-4
 5c4:	5b 9d 00 04 	sw (sp+4),ra
 5c8:	34 01 00 0f 	mvi r1,15
 5cc:	fb ff ff 34 	calli 29c <writeCommandlcd>
}
 5d0:	2b 9d 00 04 	lw ra,(sp+4)
 5d4:	37 9c 00 04 	addi sp,sp,4
 5d8:	c3 a0 00 00 	ret

000005dc <cursorShiftRight>:

void cursorShiftRight()
{	writeCommandlcd(0b00010100);
 5dc:	37 9c ff fc 	addi sp,sp,-4
 5e0:	5b 9d 00 04 	sw (sp+4),ra
 5e4:	34 01 00 14 	mvi r1,20
 5e8:	fb ff ff 2d 	calli 29c <writeCommandlcd>
}
 5ec:	2b 9d 00 04 	lw ra,(sp+4)
 5f0:	37 9c 00 04 	addi sp,sp,4
 5f4:	c3 a0 00 00 	ret

000005f8 <cursorShiftLeft>:

void cursorShiftLeft()
{	writeCommandlcd(0b00010000);
 5f8:	37 9c ff fc 	addi sp,sp,-4
 5fc:	5b 9d 00 04 	sw (sp+4),ra
 600:	34 01 00 10 	mvi r1,16
 604:	fb ff ff 26 	calli 29c <writeCommandlcd>
}
 608:	2b 9d 00 04 	lw ra,(sp+4)
 60c:	37 9c 00 04 	addi sp,sp,4
 610:	c3 a0 00 00 	ret

00000614 <displayShiftRight>:

void displayShiftRight()
{	writeCommandlcd(0b00011100);
 614:	37 9c ff fc 	addi sp,sp,-4
 618:	5b 9d 00 04 	sw (sp+4),ra
 61c:	34 01 00 1c 	mvi r1,28
 620:	fb ff ff 1f 	calli 29c <writeCommandlcd>
}
 624:	2b 9d 00 04 	lw ra,(sp+4)
 628:	37 9c 00 04 	addi sp,sp,4
 62c:	c3 a0 00 00 	ret

00000630 <displayShiftLeft>:

void displayShiftLeft()
{	writeCommandlcd(0b00011000);
 630:	37 9c ff fc 	addi sp,sp,-4
 634:	5b 9d 00 04 	sw (sp+4),ra
 638:	34 01 00 18 	mvi r1,24
 63c:	fb ff ff 18 	calli 29c <writeCommandlcd>
}
 640:	2b 9d 00 04 	lw ra,(sp+4)
 644:	37 9c 00 04 	addi sp,sp,4
 648:	c3 a0 00 00 	ret

0000064c <functionSet>:

void functionSet()
{	writeCommandlcd(0b00101000);
 64c:	37 9c ff fc 	addi sp,sp,-4
 650:	5b 9d 00 04 	sw (sp+4),ra
 654:	34 01 00 28 	mvi r1,40
 658:	fb ff ff 11 	calli 29c <writeCommandlcd>
}
 65c:	2b 9d 00 04 	lw ra,(sp+4)
 660:	37 9c 00 04 	addi sp,sp,4
 664:	c3 a0 00 00 	ret

00000668 <displayAddress>:

void displayAddress(uint8_t col, uint8_t row){
 668:	37 9c ff ec 	addi sp,sp,-20
 66c:	5b 9d 00 04 	sw (sp+4),ra
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 670:	34 03 00 40 	mvi r3,64
 674:	5b 83 00 0c 	sw (sp+12),r3
 678:	34 03 00 14 	mvi r3,20
 67c:	5b 83 00 10 	sw (sp+16),r3
 680:	34 03 00 54 	mvi r3,84
 684:	5b 83 00 14 	sw (sp+20),r3

void functionSet()
{	writeCommandlcd(0b00101000);
}

void displayAddress(uint8_t col, uint8_t row){
 688:	20 42 00 ff 	andi r2,r2,0xff
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 68c:	5b 80 00 08 	sw (sp+8),r0
	if(row>2){
 690:	34 04 00 02 	mvi r4,2

void functionSet()
{	writeCommandlcd(0b00101000);
}

void displayAddress(uint8_t col, uint8_t row){
 694:	20 21 00 ff 	andi r1,r1,0xff
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if(row>2){
 698:	34 03 00 40 	mvi r3,64
 69c:	54 44 00 05 	bgu r2,r4,6b0 <displayAddress+0x48>
 6a0:	3c 42 00 02 	sli r2,r2,2
 6a4:	37 83 00 14 	addi r3,sp,20
 6a8:	b4 62 10 00 	add r2,r3,r2
 6ac:	40 43 ff f7 	lbu r3,(r2+-9)
		row = 2-1;
	}
        writeCommandlcd (0x80|(col + row_offsets[row]));
 6b0:	b4 61 08 00 	add r1,r3,r1
 6b4:	20 21 00 7f 	andi r1,r1,0x7f
 6b8:	38 21 00 80 	ori r1,r1,0x80
 6bc:	fb ff fe f8 	calli 29c <writeCommandlcd>
}
 6c0:	2b 9d 00 04 	lw ra,(sp+4)
 6c4:	37 9c 00 14 	addi sp,sp,20
 6c8:	c3 a0 00 00 	ret

000006cc <asciiConv>:
// ASCII Converter
// para los datos obtenidos de los modulos, ejemplo WIFI
//---------------------------------------------------------------------------

char asciiConv (char number)
{	return number+48;
 6cc:	34 21 00 30 	addi r1,r1,48
}
 6d0:	20 21 00 ff 	andi r1,r1,0xff
 6d4:	c3 a0 00 00 	ret

000006d8 <asciiConvLcd_Dig1>:

char asciiConvLcd_Dig1 (char number)
{	char highnib;
	char lownib;
	highnib = number&0xF0;
	lownib = number&0x0F;
 6d8:	20 21 00 0f 	andi r1,r1,0xf
	return (lownib)+48;
}
 6dc:	34 21 00 30 	addi r1,r1,48
 6e0:	c3 a0 00 00 	ret

000006e4 <asciiConvLcd_Dig2>:
char asciiConvLcd_Dig2 (char number)
{	char highnib;
	char lownib;
	highnib = number&0xF0;
	lownib = number&0x0F;
	return (highnib >> 4)+48;
 6e4:	20 21 00 f0 	andi r1,r1,0xf0
 6e8:	00 21 00 04 	srui r1,r1,4
}
 6ec:	34 21 00 30 	addi r1,r1,48
 6f0:	c3 a0 00 00 	ret

000006f4 <main>:

//---------------------------------------------------------------------------
// Main project 1
//---------------------------------------------------------------------------

int main(){
 6f4:	37 9c ff f8 	addi sp,sp,-8
 6f8:	5b 8b 00 08 	sw (sp+8),r11
 6fc:	5b 9d 00 04 	sw (sp+4),ra

	//habilito interruciones y la mascara de interruciones
	irq_enable();
 700:	fb ff fe 90 	calli 140 <irq_enable>
	irq_set_mask(0x01);
 704:	34 01 00 01 	mvi r1,1
 708:	78 0b 00 00 	mvhi r11,0x0
 70c:	fb ff fe 93 	calli 158 <irq_set_mask>
 710:	39 6b 0e ac 	ori r11,r11,0xeac

	//Inicializando el modulo WiFi	
	init_wifi(); 
 714:	f8 00 01 30 	calli bd4 <init_wifi>

	//Inicializando el modulo de la pantalla LCD 16x2
	lcdInit();
 718:	fb ff ff 14 	calli 368 <lcdInit>
	clearDisplay();
 71c:	fb ff ff 78 	calli 4fc <clearDisplay>
	entryModeSet2();
 720:	fb ff ff 85 	calli 534 <entryModeSet2>
	returnHome();
 724:	fb ff ff 7d 	calli 518 <returnHome>
		break;
 	 }
*/	//fin: bloque lectura interruci칩n 
	//-------------------------------------------	

	writeStringlcd("Juego Digital");
 728:	b9 60 08 00 	mv r1,r11
 72c:	fb ff ff 01 	calli 330 <writeStringlcd>
	displayAddress(0,1);
 730:	34 02 00 01 	mvi r2,1
 734:	34 01 00 00 	mvi r1,0
 738:	fb ff ff cc 	calli 668 <displayAddress>

	//writeCharlcd('T');
	//writeCharlcd(0xDF); //para imprimir el c치racter 췈 
	//writeStringlcd(": no data");
	
	msleep (1000);
 73c:	34 01 03 e8 	mvi r1,1000
 740:	f8 00 00 26 	calli 7d8 <msleep>
	returnHome();
 744:	fb ff ff 75 	calli 518 <returnHome>
 748:	e3 ff ff f8 	bi 728 <main+0x34>

0000074c <isr_null>:
 * IRQ handling
 * interrupciones
*/
void isr_null()
{
}
 74c:	c3 a0 00 00 	ret

00000750 <tic_isr>:
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 750:	78 01 00 00 	mvhi r1,0x0
 754:	38 21 10 08 	ori r1,r1,0x1008
 758:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 75c:	78 02 00 00 	mvhi r2,0x0
 760:	38 42 0f 78 	ori r2,r2,0xf78
 764:	28 42 00 00 	lw r2,(r2+0)
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 768:	34 63 00 01 	addi r3,r3,1
 76c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 770:	34 01 00 0e 	mvi r1,14
 774:	58 41 00 00 	sw (r2+0),r1
}
 778:	c3 a0 00 00 	ret

0000077c <isr_init>:
	}

}

void isr_init()
{
 77c:	78 01 00 00 	mvhi r1,0x0
 780:	78 02 00 00 	mvhi r2,0x0
 784:	38 21 0f 88 	ori r1,r1,0xf88
 788:	38 42 07 4c 	ori r2,r2,0x74c
			break;
	}

}

void isr_init()
 78c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 790:	58 22 00 00 	sw (r1+0),r2
 794:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 798:	5c 23 ff fe 	bne r1,r3,790 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 79c:	c3 a0 00 00 	ret

000007a0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 7a0:	78 03 00 00 	mvhi r3,0x0
 7a4:	3c 21 00 02 	sli r1,r1,2
 7a8:	38 63 0f 88 	ori r3,r3,0xf88
 7ac:	b4 61 18 00 	add r3,r3,r1
 7b0:	58 62 00 00 	sw (r3+0),r2
}
 7b4:	c3 a0 00 00 	ret

000007b8 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 7b8:	78 03 00 00 	mvhi r3,0x0
 7bc:	3c 21 00 02 	sli r1,r1,2
 7c0:	38 63 0f 88 	ori r3,r3,0xf88
 7c4:	78 02 00 00 	mvhi r2,0x0
 7c8:	b4 61 18 00 	add r3,r3,r1
 7cc:	38 42 07 4c 	ori r2,r2,0x74c
 7d0:	58 62 00 00 	sw (r3+0),r2
}
 7d4:	c3 a0 00 00 	ret

000007d8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 7d8:	78 04 00 00 	mvhi r4,0x0
 7dc:	38 84 0e bc 	ori r4,r4,0xebc
 7e0:	28 83 00 00 	lw r3,(r4+0)
 7e4:	78 02 00 00 	mvhi r2,0x0
 7e8:	38 42 0f 78 	ori r2,r2,0xf78
 7ec:	28 42 00 00 	lw r2,(r2+0)
 7f0:	88 23 08 00 	mul r1,r1,r3
 7f4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7f8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 7fc:	34 01 00 0a 	mvi r1,10
 800:	58 41 00 0c 	sw (r2+12),r1
	do {
		//halt();
 		tcr = timer0->tcr1;
 804:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 808:	20 21 00 01 	andi r1,r1,0x1
 80c:	44 20 ff fe 	be r1,r0,804 <msleep+0x2c>
}
 810:	c3 a0 00 00 	ret

00000814 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 814:	37 9c ff fc 	addi sp,sp,-4
 818:	5b 9d 00 04 	sw (sp+4),ra
	switch(pending){
 81c:	34 02 00 01 	mvi r2,1
 820:	5c 22 00 10 	bne r1,r2,860 <irq_handler+0x4c>
		case 0x01:
		       	lcdInit();
 824:	fb ff fe d1 	calli 368 <lcdInit>
			clearDisplay();
 828:	fb ff ff 35 	calli 4fc <clearDisplay>
			entryModeSet2();
 82c:	fb ff ff 42 	calli 534 <entryModeSet2>
			returnHome();
 830:	fb ff ff 3a 	calli 518 <returnHome>
			writeStringlcd("interrupci칩n");
 834:	78 01 00 00 	mvhi r1,0x0
 838:	38 21 0e c0 	ori r1,r1,0xec0
 83c:	fb ff fe bd 	calli 330 <writeStringlcd>
			displayAddress(0,1);
 840:	34 02 00 01 	mvi r2,1
 844:	34 01 00 00 	mvi r1,0
 848:	fb ff ff 88 	calli 668 <displayAddress>
			writeStringlcd("WiFi");
 84c:	78 01 00 00 	mvhi r1,0x0
 850:	38 21 0e d0 	ori r1,r1,0xed0
 854:	fb ff fe b7 	calli 330 <writeStringlcd>
			msleep (1000);		
 858:	34 01 03 e8 	mvi r1,1000
 85c:	fb ff ff df 	calli 7d8 <msleep>
			break;
		default:
			break;
	}

}
 860:	2b 9d 00 04 	lw ra,(sp+4)
 864:	37 9c 00 04 	addi sp,sp,4
 868:	c3 a0 00 00 	ret

0000086c <nsleep>:
{
	uint32_t tcr;

	// Use timer0.1
	//timer0->compare1 = (nsec/10);
	timer0->compare1 = (FCPU/1000000000)*nsec;
 86c:	78 01 00 00 	mvhi r1,0x0
 870:	38 21 0f 78 	ori r1,r1,0xf78
 874:	28 21 00 00 	lw r1,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 878:	34 02 00 0a 	mvi r2,10
{
	uint32_t tcr;

	// Use timer0.1
	//timer0->compare1 = (nsec/10);
	timer0->compare1 = (FCPU/1000000000)*nsec;
 87c:	58 20 00 10 	sw (r1+16),r0
	timer0->counter1 = 0;
 880:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 884:	58 22 00 0c 	sw (r1+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 888:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 88c:	20 42 00 01 	andi r2,r2,0x1
 890:	44 40 ff fe 	be r2,r0,888 <nsleep+0x1c>
}
 894:	c3 a0 00 00 	ret

00000898 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 898:	78 01 00 00 	mvhi r1,0x0
 89c:	38 21 0f 78 	ori r1,r1,0xf78
 8a0:	28 23 00 00 	lw r3,(r1+0)
 8a4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 8a8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 8ac:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 8b0:	38 21 10 08 	ori r1,r1,0x1008

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 8b4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 8b8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 8bc:	78 02 00 00 	mvhi r2,0x0
 8c0:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 8c4:	34 04 00 0e 	mvi r4,14
 8c8:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 8cc:	38 21 0f 88 	ori r1,r1,0xf88
 8d0:	38 42 07 50 	ori r2,r2,0x750
 8d4:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 8d8:	c3 a0 00 00 	ret

000008dc <uart_init>:
 * UART Functions
 */

void uart_init()
{
}
 8dc:	c3 a0 00 00 	ret

000008e0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8e0:	40 24 00 00 	lbu r4,(r1+0)
 8e4:	44 80 00 0b 	be r4,r0,910 <uart_putstr+0x30>
 8e8:	78 02 00 00 	mvhi r2,0x0
 8ec:	38 42 0f 74 	ori r2,r2,0xf74
 8f0:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 8f4:	28 62 00 00 	lw r2,(r3+0)
 8f8:	20 42 00 10 	andi r2,r2,0x10
 8fc:	5c 40 ff fe 	bne r2,r0,8f4 <uart_putstr+0x14>
	uart0->rxtx = c;
 900:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 904:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 908:	40 24 00 00 	lbu r4,(r1+0)
 90c:	5c 82 ff fa 	bne r4,r2,8f4 <uart_putstr+0x14>
 910:	c3 a0 00 00 	ret

00000914 <uart_getchar>:
		c++;
	}
}

char uart_getchar()
{   
 914:	78 01 00 00 	mvhi r1,0x0
 918:	38 21 0f 74 	ori r1,r1,0xf74
 91c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 920:	28 41 00 00 	lw r1,(r2+0)
 924:	20 21 00 01 	andi r1,r1,0x1
 928:	44 20 ff fe 	be r1,r0,920 <uart_getchar+0xc>
	return uart0->rxtx;
 92c:	28 41 00 04 	lw r1,(r2+4)
}
 930:	20 21 00 ff 	andi r1,r1,0xff
 934:	c3 a0 00 00 	ret

00000938 <uart_putchar>:

void uart_putchar(char c)
{
 938:	78 02 00 00 	mvhi r2,0x0
 93c:	38 42 0f 74 	ori r2,r2,0xf74
 940:	28 43 00 00 	lw r3,(r2+0)
 944:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 948:	28 62 00 00 	lw r2,(r3+0)
 94c:	20 42 00 10 	andi r2,r2,0x10
 950:	5c 40 ff fe 	bne r2,r0,948 <uart_putchar+0x10>
	uart0->rxtx = c;
 954:	58 61 00 04 	sw (r3+4),r1
}
 958:	c3 a0 00 00 	ret

0000095c <wifi_getchar2>:
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
 95c:	78 01 00 00 	mvhi r1,0x0
 960:	38 21 0f 74 	ori r1,r1,0xf74
 964:	28 22 00 00 	lw r2,(r1+0)
}
	
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 968:	34 03 00 00 	mvi r3,0
		c = uart_one_getchar();
		if (c ==':'){
 96c:	34 04 00 3a 	mvi r4,58
}
	
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 970:	34 05 00 14 	mvi r5,20
	uart0->rxtx = c;
}

char uart_one_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 974:	28 41 00 00 	lw r1,(r2+0)
 978:	20 21 00 01 	andi r1,r1,0x1
 97c:	44 20 ff fe 	be r1,r0,974 <wifi_getchar2+0x18>
	return uart0->rxtx;
 980:	28 41 00 04 	lw r1,(r2+4)
}
	
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 984:	34 63 00 01 	addi r3,r3,1
		c = uart_one_getchar();
		if (c ==':'){
 988:	20 21 00 ff 	andi r1,r1,0xff
 98c:	44 24 00 04 	be r1,r4,99c <wifi_getchar2+0x40>
}
	
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 990:	5c 65 ff f9 	bne r3,r5,974 <wifi_getchar2+0x18>
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
 994:	34 01 00 0a 	mvi r1,10
}
 998:	c3 a0 00 00 	ret
	uart0->rxtx = c;
}

char uart_one_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 99c:	28 41 00 00 	lw r1,(r2+0)
 9a0:	20 21 00 01 	andi r1,r1,0x1
 9a4:	44 20 ff fe 	be r1,r0,99c <wifi_getchar2+0x40>
	return uart0->rxtx;
 9a8:	28 41 00 04 	lw r1,(r2+4)
 9ac:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_one_getchar();
		if (c ==':'){
			c = uart_one_getchar();
			return c;
 9b0:	c3 a0 00 00 	ret

000009b4 <ok>:
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 9b4:	78 01 00 00 	mvhi r1,0x0
 9b8:	38 21 0f 74 	ori r1,r1,0xf74
 9bc:	28 22 00 00 	lw r2,(r1+0)
}
	//funci칩n para comprobar que el comando fue enviado correctamente.
int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9c0:	34 03 00 00 	mvi r3,0
		a = uart_one_getchar();
		if(a=='K'){
 9c4:	34 04 00 4b 	mvi r4,75
}
	//funci칩n para comprobar que el comando fue enviado correctamente.
int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9c8:	34 05 00 1e 	mvi r5,30
	uart0->rxtx = c;
}

char uart_one_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 9cc:	28 41 00 00 	lw r1,(r2+0)
 9d0:	20 21 00 01 	andi r1,r1,0x1
 9d4:	44 20 ff fe 	be r1,r0,9cc <ok+0x18>
	return uart0->rxtx;
 9d8:	28 41 00 04 	lw r1,(r2+4)
}
	//funci칩n para comprobar que el comando fue enviado correctamente.
int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9dc:	34 63 00 01 	addi r3,r3,1
		a = uart_one_getchar();
		if(a=='K'){
 9e0:	20 21 00 ff 	andi r1,r1,0xff
 9e4:	44 24 00 04 	be r1,r4,9f4 <ok+0x40>
}
	//funci칩n para comprobar que el comando fue enviado correctamente.
int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9e8:	5c 65 ff f9 	bne r3,r5,9cc <ok+0x18>
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 9ec:	34 01 00 00 	mvi r1,0
 9f0:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
 9f4:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 9f8:	c3 a0 00 00 	ret

000009fc <uart_gen_putstr>:

void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
 9fc:	40 24 00 00 	lbu r4,(r1+0)
 a00:	44 80 00 0b 	be r4,r0,a2c <uart_gen_putstr+0x30>
 a04:	78 02 00 00 	mvhi r2,0x0
 a08:	38 42 0f 74 	ori r2,r2,0xf74
 a0c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 a10:	28 62 00 00 	lw r2,(r3+0)
 a14:	20 42 00 10 	andi r2,r2,0x10
 a18:	5c 40 ff fe 	bne r2,r0,a10 <uart_gen_putstr+0x14>
	uart0->rxtx = c;
 a1c:	58 64 00 04 	sw (r3+4),r4
void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_gen_putchar(*c);
		c++;
 a20:	34 21 00 01 	addi r1,r1,1
}

void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
 a24:	40 24 00 00 	lbu r4,(r1+0)
 a28:	5c 82 ff fa 	bne r4,r2,a10 <uart_gen_putstr+0x14>
 a2c:	c3 a0 00 00 	ret

00000a30 <wifi_putstr>:
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}

void wifi_putstr(char *a){
 a30:	37 9c ff e0 	addi sp,sp,-32
 a34:	5b 8b 00 20 	sw (sp+32),r11
 a38:	5b 8c 00 1c 	sw (sp+28),r12
 a3c:	5b 8d 00 18 	sw (sp+24),r13
 a40:	5b 8e 00 14 	sw (sp+20),r14
 a44:	5b 8f 00 10 	sw (sp+16),r15
 a48:	5b 90 00 0c 	sw (sp+12),r16
 a4c:	5b 91 00 08 	sw (sp+8),r17
 a50:	5b 9d 00 04 	sw (sp+4),ra
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 a54:	40 24 00 00 	lbu r4,(r1+0)
 a58:	78 0c 00 00 	mvhi r12,0x0
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}

void wifi_putstr(char *a){
 a5c:	b8 20 30 00 	mv r6,r1
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 a60:	34 10 00 00 	mvi r16,0
 a64:	39 8c 0f 74 	ori r12,r12,0xf74
 a68:	44 80 00 0c 	be r4,r0,a98 <wifi_putstr+0x68>
 a6c:	29 83 00 00 	lw r3,(r12+0)
}

void wifi_putstr(char *a){
	int c = 0;   
	char *cc = a;
	int counter = 0;
 a70:	34 05 00 00 	mvi r5,0
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 a74:	28 62 00 00 	lw r2,(r3+0)
 a78:	20 42 00 10 	andi r2,r2,0x10
 a7c:	5c 40 ff fe 	bne r2,r0,a74 <wifi_putstr+0x44>
	char *cc = a;
	int counter = 0;
	while(*cc) {
		uart_putchar(*cc);
		cc++;
		counter ++;
 a80:	34 a5 00 01 	addi r5,r5,1
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 a84:	58 64 00 04 	sw (r3+4),r4
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}

void wifi_putstr(char *a){
 a88:	b4 c5 08 00 	add r1,r6,r5
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 a8c:	40 24 00 00 	lbu r4,(r1+0)
 a90:	5c 82 ff f9 	bne r4,r2,a74 <wifi_putstr+0x44>
 a94:	b8 a0 80 00 	mv r16,r5
 a98:	78 0f 00 00 	mvhi r15,0x0
 a9c:	78 0e 00 00 	mvhi r14,0x0
 aa0:	20 d1 00 ff 	andi r17,r6,0xff
 aa4:	39 ef 0e d8 	ori r15,r15,0xed8
 aa8:	39 ce 0f 70 	ori r14,r14,0xf70
		cc++;
		counter ++;
	}

	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,");
 aac:	b9 e0 08 00 	mv r1,r15
 ab0:	fb ff ff d3 	calli 9fc <uart_gen_putstr>
		uart_gen_putstr(counter);
 ab4:	ba 00 08 00 	mv r1,r16
 ab8:	fb ff ff d1 	calli 9fc <uart_gen_putstr>
		uart_gen_putstr("\r\n");
 abc:	b9 c0 08 00 	mv r1,r14
 ac0:	fb ff ff cf 	calli 9fc <uart_gen_putstr>
		msleep(10);
 ac4:	34 01 00 0a 	mvi r1,10
 ac8:	fb ff ff 44 	calli 7d8 <msleep>
 acc:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 ad0:	28 4b 00 00 	lw r11,(r2+0)
 ad4:	21 6b 00 10 	andi r11,r11,0x10
 ad8:	5d 60 ff fe 	bne r11,r0,ad0 <wifi_putstr+0xa0>
	uart0->rxtx = c;
 adc:	58 51 00 04 	sw (r2+4),r17
		uart_gen_putstr("AT+CIPSEND=0,");
		uart_gen_putstr(counter);
		uart_gen_putstr("\r\n");
		msleep(10);
		uart_gen_putchar(a);
		c = ok();
 ae0:	fb ff ff b5 	calli 9b4 <ok>
 ae4:	b8 20 68 00 	mv r13,r1
		msleep(100);
 ae8:	34 01 00 64 	mvi r1,100
 aec:	fb ff ff 3b 	calli 7d8 <msleep>
		uart_putchar(*cc);
		cc++;
		counter ++;
	}

	while(c == 0){
 af0:	45 ab ff ef 	be r13,r11,aac <wifi_putstr+0x7c>
 af4:	78 0b 00 00 	mvhi r11,0x0
 af8:	39 6b 0e e8 	ori r11,r11,0xee8
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
 afc:	b9 60 08 00 	mv r1,r11
 b00:	fb ff ff bf 	calli 9fc <uart_gen_putstr>
		c = ok();
 b04:	fb ff ff ac 	calli 9b4 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
 b08:	44 20 ff fd 	be r1,r0,afc <wifi_putstr+0xcc>
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
 b0c:	2b 9d 00 04 	lw ra,(sp+4)
 b10:	2b 8b 00 20 	lw r11,(sp+32)
 b14:	2b 8c 00 1c 	lw r12,(sp+28)
 b18:	2b 8d 00 18 	lw r13,(sp+24)
 b1c:	2b 8e 00 14 	lw r14,(sp+20)
 b20:	2b 8f 00 10 	lw r15,(sp+16)
 b24:	2b 90 00 0c 	lw r16,(sp+12)
 b28:	2b 91 00 08 	lw r17,(sp+8)
 b2c:	37 9c 00 20 	addi sp,sp,32
 b30:	c3 a0 00 00 	ret

00000b34 <wifi_putchar2>:
	}//fin de segmento
}


	//funciones con la secuencia para enviar datos a travez del periferico UART a el modulo ESP8266
void wifi_putchar2(char a){
 b34:	37 9c ff e8 	addi sp,sp,-24
 b38:	5b 8b 00 18 	sw (sp+24),r11
 b3c:	5b 8c 00 14 	sw (sp+20),r12
 b40:	5b 8d 00 10 	sw (sp+16),r13
 b44:	5b 8e 00 0c 	sw (sp+12),r14
 b48:	5b 8f 00 08 	sw (sp+8),r15
 b4c:	5b 9d 00 04 	sw (sp+4),ra
 b50:	78 0e 00 00 	mvhi r14,0x0
 b54:	78 0d 00 00 	mvhi r13,0x0
 b58:	20 2f 00 ff 	andi r15,r1,0xff
 b5c:	39 ce 0e f8 	ori r14,r14,0xef8
 b60:	39 ad 0f 74 	ori r13,r13,0xf74
	int c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,1\r\n");
 b64:	b9 c0 08 00 	mv r1,r14
 b68:	fb ff ff a5 	calli 9fc <uart_gen_putstr>
		msleep(10);
 b6c:	34 01 00 0a 	mvi r1,10
 b70:	fb ff ff 1a 	calli 7d8 <msleep>
 b74:	29 a2 00 00 	lw r2,(r13+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 b78:	28 4b 00 00 	lw r11,(r2+0)
 b7c:	21 6b 00 10 	andi r11,r11,0x10
 b80:	5d 60 ff fe 	bne r11,r0,b78 <wifi_putchar2+0x44>
	uart0->rxtx = c;
 b84:	58 4f 00 04 	sw (r2+4),r15
	int c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,1\r\n");
		msleep(10);
		uart_gen_putchar(a);
		c = ok();
 b88:	fb ff ff 8b 	calli 9b4 <ok>
 b8c:	b8 20 60 00 	mv r12,r1
		msleep(100);
 b90:	34 01 00 64 	mvi r1,100
 b94:	fb ff ff 11 	calli 7d8 <msleep>


	//funciones con la secuencia para enviar datos a travez del periferico UART a el modulo ESP8266
void wifi_putchar2(char a){
	int c = 0; 	  
	while(c == 0){
 b98:	45 8b ff f3 	be r12,r11,b64 <wifi_putchar2+0x30>
 b9c:	78 0b 00 00 	mvhi r11,0x0
 ba0:	39 6b 0e e8 	ori r11,r11,0xee8
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
 ba4:	b9 60 08 00 	mv r1,r11
 ba8:	fb ff ff 95 	calli 9fc <uart_gen_putstr>
		c = ok();
 bac:	fb ff ff 82 	calli 9b4 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
 bb0:	44 20 ff fd 	be r1,r0,ba4 <wifi_putchar2+0x70>
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
 bb4:	2b 9d 00 04 	lw ra,(sp+4)
 bb8:	2b 8b 00 18 	lw r11,(sp+24)
 bbc:	2b 8c 00 14 	lw r12,(sp+20)
 bc0:	2b 8d 00 10 	lw r13,(sp+16)
 bc4:	2b 8e 00 0c 	lw r14,(sp+12)
 bc8:	2b 8f 00 08 	lw r15,(sp+8)
 bcc:	37 9c 00 18 	addi sp,sp,24
 bd0:	c3 a0 00 00 	ret

00000bd4 <init_wifi>:
}
/*******************************
 **** FUNCIONES PARA WIFI   ****
 *******************************/

void init_wifi(){ //configurar el modulo como estaci칩n con puerto 80
 bd4:	37 9c ff f8 	addi sp,sp,-8
 bd8:	5b 8b 00 08 	sw (sp+8),r11
 bdc:	5b 9d 00 04 	sw (sp+4),ra
 be0:	78 0b 00 00 	mvhi r11,0x0
 be4:	39 6b 0f 0c 	ori r11,r11,0xf0c
	//comando de prueba
	int c=0;
	while(c==0){
		uart_gen_putstr(" AT+RST\r\n");
 be8:	b9 60 08 00 	mv r1,r11
 bec:	fb ff ff 84 	calli 9fc <uart_gen_putstr>
		c=ok();
 bf0:	fb ff ff 71 	calli 9b4 <ok>
 *******************************/

void init_wifi(){ //configurar el modulo como estaci칩n con puerto 80
	//comando de prueba
	int c=0;
	while(c==0){
 bf4:	44 20 ff fd 	be r1,r0,be8 <init_wifi+0x14>
		uart_gen_putstr(" AT+RST\r\n");
		c=ok();
	}
	
	msleep(200);
 bf8:	34 01 00 c8 	mvi r1,200
 bfc:	78 0b 00 00 	mvhi r11,0x0
 c00:	fb ff fe f6 	calli 7d8 <msleep>
 c04:	39 6b 0f 18 	ori r11,r11,0xf18
	c = 0;
	while(c==0){  //con el siguiente comando aceptamos que el modulo tenga multiples conexiones
		uart_gen_putstr("AT+CIPMUX=1\r\n");
 c08:	b9 60 08 00 	mv r1,r11
 c0c:	fb ff ff 7c 	calli 9fc <uart_gen_putstr>
		c = ok();
 c10:	fb ff ff 69 	calli 9b4 <ok>
		c=ok();
	}
	
	msleep(200);
	c = 0;
	while(c==0){  //con el siguiente comando aceptamos que el modulo tenga multiples conexiones
 c14:	44 20 ff fd 	be r1,r0,c08 <init_wifi+0x34>
		uart_gen_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	msleep(10);
 c18:	34 01 00 0a 	mvi r1,10
 c1c:	78 0b 00 00 	mvhi r11,0x0
 c20:	fb ff fe ee 	calli 7d8 <msleep>
 c24:	39 6b 0f 28 	ori r11,r11,0xf28
	c = 0;
	
	//Se configura el modulo como un servidor con puerto 80
	while (c==0){
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
 c28:	b9 60 08 00 	mv r1,r11
 c2c:	fb ff ff 74 	calli 9fc <uart_gen_putstr>
		c = ok();
 c30:	fb ff ff 61 	calli 9b4 <ok>
	}
	msleep(10);
	c = 0;
	
	//Se configura el modulo como un servidor con puerto 80
	while (c==0){
 c34:	44 20 ff fd 	be r1,r0,c28 <init_wifi+0x54>
		c = ok();
	}

	//configurar Servidor como un acces point
	//con esto no spodemos conectar desde cualquier dispositivo
	msleep(10);
 c38:	34 01 00 0a 	mvi r1,10
 c3c:	78 0b 00 00 	mvhi r11,0x0
 c40:	fb ff fe e6 	calli 7d8 <msleep>
 c44:	39 6b 0f 3c 	ori r11,r11,0xf3c
	c=0;
	while(c==0){
		uart_gen_putstr("AT+CWSAP_CUR=\"SecadorCafe\",\"cafe1234\",5,3\r\n");
 c48:	b9 60 08 00 	mv r1,r11
 c4c:	fb ff ff 6c 	calli 9fc <uart_gen_putstr>
		c=ok();
 c50:	fb ff ff 59 	calli 9b4 <ok>

	//configurar Servidor como un acces point
	//con esto no spodemos conectar desde cualquier dispositivo
	msleep(10);
	c=0;
	while(c==0){
 c54:	44 20 ff fd 	be r1,r0,c48 <init_wifi+0x74>
		c=ok();
	}


	//inicio segmento para obtener direcci칩n IP
	msleep(10);
 c58:	34 01 00 0a 	mvi r1,10
 c5c:	78 0b 00 00 	mvhi r11,0x0
 c60:	fb ff fe de 	calli 7d8 <msleep>
 c64:	39 6b 0f 68 	ori r11,r11,0xf68
	c=0;
	while(c==0){
		uart_gen_putstr("AT+CIFSR\r\n");
 c68:	b9 60 08 00 	mv r1,r11
 c6c:	fb ff ff 64 	calli 9fc <uart_gen_putstr>
		c=ok();
 c70:	fb ff ff 51 	calli 9b4 <ok>


	//inicio segmento para obtener direcci칩n IP
	msleep(10);
	c=0;
	while(c==0){
 c74:	44 20 ff fd 	be r1,r0,c68 <init_wifi+0x94>
		uart_gen_putstr("AT+CIFSR\r\n");
		c=ok();
	}//fin de segmento
}
 c78:	2b 9d 00 04 	lw ra,(sp+4)
 c7c:	2b 8b 00 08 	lw r11,(sp+8)
 c80:	37 9c 00 08 	addi sp,sp,8
 c84:	c3 a0 00 00 	ret

00000c88 <uart_gen_putchar>:
		c++;
	}
}

void uart_gen_putchar(char c)
{
 c88:	78 02 00 00 	mvhi r2,0x0
 c8c:	38 42 0f 74 	ori r2,r2,0xf74
 c90:	28 43 00 00 	lw r3,(r2+0)
 c94:	20 21 00 ff 	andi r1,r1,0xff
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 c98:	28 62 00 00 	lw r2,(r3+0)
 c9c:	20 42 00 10 	andi r2,r2,0x10
 ca0:	5c 40 ff fe 	bne r2,r0,c98 <uart_gen_putchar+0x10>
	uart0->rxtx = c;
 ca4:	58 61 00 04 	sw (r3+4),r1
}

void uart_gen_putchar(char c)
{
	 uart_putchar(c);
}
 ca8:	c3 a0 00 00 	ret

00000cac <uart_one_putchar>:

void uart_one_putchar(char c)
{
 cac:	78 02 00 00 	mvhi r2,0x0
 cb0:	38 42 0f 74 	ori r2,r2,0xf74
 cb4:	28 43 00 00 	lw r3,(r2+0)
 cb8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ; 
 cbc:	28 62 00 00 	lw r2,(r3+0)
 cc0:	20 42 00 10 	andi r2,r2,0x10
 cc4:	5c 40 ff fe 	bne r2,r0,cbc <uart_one_putchar+0x10>
	uart0->rxtx = c;
 cc8:	58 61 00 04 	sw (r3+4),r1
}
 ccc:	c3 a0 00 00 	ret

00000cd0 <uart_one_getchar>:

char uart_one_getchar()
{   
 cd0:	78 01 00 00 	mvhi r1,0x0
 cd4:	38 21 0f 74 	ori r1,r1,0xf74
 cd8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 cdc:	28 41 00 00 	lw r1,(r2+0)
 ce0:	20 21 00 01 	andi r1,r1,0x1
 ce4:	44 20 ff fe 	be r1,r0,cdc <uart_one_getchar+0xc>
	return uart0->rxtx;
 ce8:	28 41 00 04 	lw r1,(r2+4)
}
 cec:	20 21 00 ff 	andi r1,r1,0xff
 cf0:	c3 a0 00 00 	ret

00000cf4 <spi_putchar>:
/********************
 * SPI0 Funtions
 */

void spi_putchar(char c){
	while (spi0->cs & SPI_BUSY) //
 cf4:	78 02 00 00 	mvhi r2,0x0
 cf8:	38 42 0f 80 	ori r2,r2,0xf80
 cfc:	28 42 00 00 	lw r2,(r2+0)

/********************
 * SPI0 Funtions
 */

void spi_putchar(char c){
 d00:	20 21 00 ff 	andi r1,r1,0xff
	while (spi0->cs & SPI_BUSY) //
 d04:	28 43 00 08 	lw r3,(r2+8)
 d08:	20 63 00 01 	andi r3,r3,0x1
 d0c:	44 60 00 05 	be r3,r0,d20 <spi_putchar+0x2c>
	spi0->rxtx=c;		
 d10:	58 41 00 00 	sw (r2+0),r1
/********************
 * SPI0 Funtions
 */

void spi_putchar(char c){
	while (spi0->cs & SPI_BUSY) //
 d14:	28 43 00 08 	lw r3,(r2+8)
 d18:	20 63 00 01 	andi r3,r3,0x1
 d1c:	5c 60 ff fd 	bne r3,r0,d10 <spi_putchar+0x1c>
 d20:	c3 a0 00 00 	ret

00000d24 <start_Read>:
/******************************
 ****   I2C Functions      ****
 ******************************/

void start_Read (int r)
{  i2c0->startRead = r;
 d24:	78 02 00 00 	mvhi r2,0x0
 d28:	38 42 0f 84 	ori r2,r2,0xf84
 d2c:	28 42 00 00 	lw r2,(r2+0)
 d30:	58 41 00 14 	sw (r2+20),r1
}
 d34:	c3 a0 00 00 	ret

00000d38 <start_Write>:
void start_Write (int w)
{  i2c0->startWrite = w;
 d38:	78 02 00 00 	mvhi r2,0x0
 d3c:	38 42 0f 84 	ori r2,r2,0xf84
 d40:	28 42 00 00 	lw r2,(r2+0)
 d44:	58 41 00 18 	sw (r2+24),r1
}
 d48:	c3 a0 00 00 	ret

00000d4c <start_Write_lcd>:
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
 d4c:	78 02 00 00 	mvhi r2,0x0
 d50:	38 42 0f 84 	ori r2,r2,0xf84
 d54:	28 42 00 00 	lw r2,(r2+0)
 d58:	58 41 00 1c 	sw (r2+28),r1
}
 d5c:	c3 a0 00 00 	ret

00000d60 <rw>:
void rw(int data_rw)
{  i2c0->rw = data_rw;
 d60:	78 02 00 00 	mvhi r2,0x0
 d64:	38 42 0f 84 	ori r2,r2,0xf84
 d68:	28 42 00 00 	lw r2,(r2+0)
 d6c:	58 41 00 0c 	sw (r2+12),r1
}
 d70:	c3 a0 00 00 	ret

00000d74 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 d74:	37 9c ff f8 	addi sp,sp,-8
 d78:	5b 8b 00 08 	sw (sp+8),r11
 d7c:	5b 9d 00 04 	sw (sp+4),ra
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
 d80:	78 0b 00 00 	mvhi r11,0x0
 d84:	3c 42 00 08 	sli r2,r2,8
 d88:	39 6b 0f 84 	ori r11,r11,0xf84
 d8c:	29 64 00 00 	lw r4,(r11+0)
 d90:	3c 21 00 10 	sli r1,r1,16
 d94:	b8 43 18 00 	or r3,r2,r3
 d98:	b8 61 08 00 	or r1,r3,r1
 d9c:	58 81 00 10 	sw (r4+16),r1
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
}
void rw(int data_rw)
{  i2c0->rw = data_rw;
 da0:	58 80 00 0c 	sw (r4+12),r0

void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 da4:	34 01 00 01 	mvi r1,1
 da8:	58 81 00 18 	sw (r4+24),r1
void i2c_write (int dirI2C, int dirIntern, int data)
{		
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
	rw(0);
	start_Write(1);
   	nsleep(20000);
 dac:	34 01 4e 20 	mvi r1,20000
 db0:	fb ff fe af 	calli 86c <nsleep>

void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 db4:	29 62 00 00 	lw r2,(r11+0)
	rw(0);
	start_Write(1);
   	nsleep(20000);
   	start_Write(0);
	
        while(!((i2c0->availWrite)==0x01));
 db8:	34 03 00 01 	mvi r3,1

void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 dbc:	58 40 00 18 	sw (r2+24),r0
	rw(0);
	start_Write(1);
   	nsleep(20000);
   	start_Write(0);
	
        while(!((i2c0->availWrite)==0x01));
 dc0:	28 41 00 04 	lw r1,(r2+4)
 dc4:	5c 23 ff ff 	bne r1,r3,dc0 <i2c_write+0x4c>
}
 dc8:	2b 9d 00 04 	lw ra,(sp+4)
 dcc:	2b 8b 00 08 	lw r11,(sp+8)
 dd0:	37 9c 00 08 	addi sp,sp,8
 dd4:	c3 a0 00 00 	ret

00000dd8 <i2c_write_lcd>:

void i2c_write_lcd (int dirI2C, int data)
{		
 dd8:	37 9c ff f8 	addi sp,sp,-8
 ddc:	5b 8b 00 08 	sw (sp+8),r11
 de0:	5b 9d 00 04 	sw (sp+4),ra
	i2c0->data = ((dirI2C<<8)|data);
 de4:	78 0b 00 00 	mvhi r11,0x0
 de8:	39 6b 0f 84 	ori r11,r11,0xf84
 dec:	29 63 00 00 	lw r3,(r11+0)
 df0:	3c 21 00 08 	sli r1,r1,8
 df4:	b8 41 10 00 	or r2,r2,r1
 df8:	58 62 00 10 	sw (r3+16),r2
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
}
void rw(int data_rw)
{  i2c0->rw = data_rw;
 dfc:	34 01 00 02 	mvi r1,2
 e00:	58 61 00 0c 	sw (r3+12),r1
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
 e04:	34 01 00 01 	mvi r1,1
 e08:	58 61 00 1c 	sw (r3+28),r1
void i2c_write_lcd (int dirI2C, int data)
{		
	i2c0->data = ((dirI2C<<8)|data);
	rw(2);
	start_Write_lcd(1);
   	nsleep(20000);
 e0c:	34 01 4e 20 	mvi r1,20000
 e10:	fb ff fe 97 	calli 86c <nsleep>
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
 e14:	29 62 00 00 	lw r2,(r11+0)
	rw(2);
	start_Write_lcd(1);
   	nsleep(20000);
   	start_Write_lcd(0);

        while(!((i2c0->availWrite)==0x01));
 e18:	34 03 00 01 	mvi r3,1
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
 e1c:	58 40 00 1c 	sw (r2+28),r0
	rw(2);
	start_Write_lcd(1);
   	nsleep(20000);
   	start_Write_lcd(0);

        while(!((i2c0->availWrite)==0x01));
 e20:	28 41 00 04 	lw r1,(r2+4)
 e24:	5c 23 ff ff 	bne r1,r3,e20 <i2c_write_lcd+0x48>
}
 e28:	2b 9d 00 04 	lw ra,(sp+4)
 e2c:	2b 8b 00 08 	lw r11,(sp+8)
 e30:	37 9c 00 08 	addi sp,sp,8
 e34:	c3 a0 00 00 	ret

00000e38 <i2c_read>:

char i2c_read (int dirI2C, int dirIntern)
{  
 e38:	37 9c ff f8 	addi sp,sp,-8
 e3c:	5b 8b 00 08 	sw (sp+8),r11
 e40:	5b 9d 00 04 	sw (sp+4),ra
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
 e44:	78 0b 00 00 	mvhi r11,0x0
 e48:	39 6b 0f 84 	ori r11,r11,0xf84
 e4c:	3c 24 00 0f 	sli r4,r1,15
 e50:	29 63 00 00 	lw r3,(r11+0)
 e54:	3c 42 00 07 	sli r2,r2,7
 e58:	b8 81 08 00 	or r1,r4,r1
 e5c:	b8 22 10 00 	or r2,r1,r2
 e60:	58 62 00 10 	sw (r3+16),r2
}
void start_Write_lcd (int wlcd)
{  i2c0->startWrite_lcd = wlcd;
}
void rw(int data_rw)
{  i2c0->rw = data_rw;
 e64:	34 01 00 01 	mvi r1,1
 e68:	58 61 00 0c 	sw (r3+12),r1
/******************************
 ****   I2C Functions      ****
 ******************************/

void start_Read (int r)
{  i2c0->startRead = r;
 e6c:	58 61 00 14 	sw (r3+20),r1
char i2c_read (int dirI2C, int dirIntern)
{  
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
	rw(1);
	start_Read(1);
   	nsleep(20000);
 e70:	34 01 4e 20 	mvi r1,20000
 e74:	fb ff fe 7e 	calli 86c <nsleep>
/******************************
 ****   I2C Functions      ****
 ******************************/

void start_Read (int r)
{  i2c0->startRead = r;
 e78:	29 62 00 00 	lw r2,(r11+0)
	rw(1);
	start_Read(1);
   	nsleep(20000);
	start_Read(0);

	while(!((i2c0->availRead)==0x05));
 e7c:	34 03 00 05 	mvi r3,5
/******************************
 ****   I2C Functions      ****
 ******************************/

void start_Read (int r)
{  i2c0->startRead = r;
 e80:	58 40 00 14 	sw (r2+20),r0
	rw(1);
	start_Read(1);
   	nsleep(20000);
	start_Read(0);

	while(!((i2c0->availRead)==0x05));
 e84:	28 41 00 08 	lw r1,(r2+8)
 e88:	5c 23 ff ff 	bne r1,r3,e84 <i2c_read+0x4c>

	return i2c0->i2c_data_out;
 e8c:	28 41 00 00 	lw r1,(r2+0)
}
 e90:	20 21 00 ff 	andi r1,r1,0xff
 e94:	2b 9d 00 04 	lw ra,(sp+4)
 e98:	2b 8b 00 08 	lw r11,(sp+8)
 e9c:	37 9c 00 08 	addi sp,sp,8
 ea0:	c3 a0 00 00 	ret
